import { useState, useEffect, useMemo } from 'react';
import { X, Plus, Trash2 } from 'lucide-react';
import { useTheme } from '@/react-app/hooks/useTheme';
import { Product, Purchase, PurchaseItem, StockLocation, WarrantyTerm } from '@/shared/types';
import { formatCurrencyBR } from '@/react-app/utils/currency';

// Define a type for purchase items within the modal, including product details
interface PurchaseItemForm extends PurchaseItem {
  product: Product; // Include product object for display and selection
}

interface PurchaseModalProps {
  isOpen: boolean;
  onClose: () => void;
  onPurchaseCreated: (purchase: Purchase) => void;
  products: Product[];
  stockLocations: StockLocation[];
  warrantyTerms: WarrantyTerm[];
  editingPurchase?: Purchase; // Optional prop for editing an existing purchase
  initialProductToAdd?: Product; // NEW: Optional prop to pre-fill with a product
}

export default function PurchaseModal({
  isOpen,
  onClose,
  onPurchaseCreated,
  products,
  stockLocations,
  warrantyTerms,
  editingPurchase,
  initialProductToAdd, // NEW
}: PurchaseModalProps) {
  const { theme } = useTheme();
  const [purchaseItems, setPurchaseItems] = useState<PurchaseItemForm[]>([]);
  const [status, setStatus] = useState<'pending' | 'completed'>('pending'); // Default status for new purchases

  // NEW: Effect to initialize purchase items when modal opens
  useEffect(() => {
    if (isOpen) {
      if (editingPurchase) {
        // If editing an existing purchase, pre-fill with its items
        setPurchaseItems(editingPurchase.purchase_items.map(item => ({
          id: item.id,
          purchase_id: item.purchase_id,
          product_id: item.product_id,
          quantity: item.quantity,
          unit_cost_price: item.unit_cost_price,
          total_cost_price: item.total_cost_price,
          product: products.find(p => p.id === item.product_id) || item.product,
        })));
        setStatus(editingPurchase.status);
      } else if (initialProductToAdd) {
        // If opened to create a new purchase for a specific product
        setPurchaseItems([{
          id: `temp-${Date.now()}`, // Temporary ID for new item in modal
          product_id: initialProductToAdd.id,
          quantity: 1,
          unit_cost_price: initialProductToAdd.cost_price,
          total_cost_price: initialProductToAdd.cost_price,
          product: initialProductToAdd,
        }]);
        setStatus('pending'); // Default to pending for new purchases
      } else {
        // Default for a completely new, empty purchase
        setPurchaseItems([]);
        setStatus('pending');
      }
    } else {
      // When modal closes, clear items and reset status
      setPurchaseItems([]);
      setStatus('pending');
    }
  }, [isOpen, initialProductToAdd, editingPurchase, products]);

  const handleAddItem = () => {
    setPurchaseItems(prev => [
      ...prev,
      {
        id: `temp-${Date.now()}`, // Temporary ID for new item in modal
        product_id: '',
        quantity: 1,
        unit_cost_price: 0,
        total_cost_price: 0,
        product: {} as Product, // Placeholder product
      },
    ]);
  };

  const handleRemoveItem = (id: string) => {
    setPurchaseItems(prev => prev.filter(item => item.id !== id));
  };

  const handleItemChange = (id: string, field: keyof PurchaseItemForm, value: any) => {
    setPurchaseItems(prev =>
      prev.map(item => {
        if (item.id === id) {
          let updatedItem = { ...item, [field]: value };

          if (field === 'product_id') {
            const selectedProduct = products.find(p => p.id === value);
            if (selectedProduct) {
              updatedItem.product = selectedProduct;
              updatedItem.unit_cost_price = selectedProduct.cost_price;
              updatedItem.total_cost_price = selectedProduct.cost_price * updatedItem.quantity;
            }
          } else if (field === 'quantity' || field === 'unit_cost_price') {
            updatedItem.total_cost_price = updatedItem.quantity * updatedItem.unit_cost_price;
          }
          return updatedItem;
        }
        return item;
      })
    );
  };

  const totalCost = useMemo(() => {
    return purchaseItems.reduce((sum, item) => sum + item.total_cost_price, 0);
  }, [purchaseItems]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();

    if (purchaseItems.length === 0) {
      alert('Adicione pelo menos um item à compra.');
      return;
    }

    const newPurchase: Purchase = {
      id: editingPurchase?.id || '', // ID will be generated by Supabase on insert
      user_id: '', // Will be filled by backend/hook
      status: status,
      total_cost: totalCost,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
      purchase_items: purchaseItems.map(item => ({
        id: item.id, // ID will be generated by Supabase on insert
        purchase_id: '', // Will be filled after purchase insert
        product_id: item.product_id,
        quantity: item.quantity,
        unit_cost_price: item.unit_cost_price,
        total_cost_price: item.total_cost_price,
        // product: item.product // Not needed for DB insert
      })),
    };

    // For now, this modal always calls onPurchaseCreated, meaning it always creates a new purchase.
    // If editing functionality is fully implemented, this would need to call an onPurchaseUpdated prop.
    onPurchaseCreated(newPurchase);
  };

  // NEW: Dynamic modal title
  const modalTitle = useMemo(() => {
    if (editingPurchase) {
      return `Editar Compra #${editingPurchase.id.substring(0, 8)}`;
    }
    if (initialProductToAdd) {
      return `Nova Compra para ${initialProductToAdd.description}`;
    }
    return 'Registrar Nova Compra';
  }, [editingPurchase, initialProductToAdd]);

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className={`relative rounded-lg shadow-2xl max-w-3xl w-full p-6 ${theme === 'dark' ? 'bg-slate-800 text-white' : 'bg-white text-slate-900'}`}>
        <button onClick={onClose} className="absolute top-4 right-4 text-slate-400 hover:text-slate-600">
          <X size={24} />
        </button>
        <h2 className="text-2xl font-bold mb-6">{modalTitle}</h2>

        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label htmlFor="status" className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-1">
              Status da Compra
            </label>
            <select
              id="status"
              value={status}
              onChange={(e) => setStatus(e.target.value as 'pending' | 'completed')}
              className={`w-full p-2 border rounded-lg ${
                theme === 'dark' ? 'bg-slate-700 border-slate-600 text-white' : 'bg-white border-slate-300 text-slate-900'
              }`}
              disabled={!!editingPurchase} // Disable status change if editing an existing purchase (for simplicity, can be adjusted)
            >
              <option value="pending">Pendente</option>
              <option value="completed">Concluída</option>
            </select>
          </div>

          <h3 className="text-lg font-semibold mb-4">Itens da Compra</h3>
          <div className="space-y-4 mb-6 max-h-60 overflow-y-auto pr-2">
            {purchaseItems.length === 0 && (
              <p className="text-slate-500 dark:text-slate-400">Nenhum item adicionado ainda.</p>
            )}
            {purchaseItems.map((item, index) => (
              <div key={item.id} className={`flex items-center space-x-4 p-3 rounded-lg ${theme === 'dark' ? 'bg-slate-700' : 'bg-slate-100'}`}>
                <div className="flex-grow grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div>
                    <label className="block text-xs font-medium text-slate-500 dark:text-slate-400">Produto</label>
                    <select
                      value={item.product_id}
                      onChange={(e) => handleItemChange(item.id, 'product_id', e.target.value)}
                      className={`w-full p-2 border rounded-lg text-sm ${
                        theme === 'dark' ? 'bg-slate-600 border-slate-500 text-white' : 'bg-white border-slate-300 text-slate-900'
                      }`}
                      required
                    >
                      <option value="">Selecione um produto</option>
                      {products.map(product => (
                        <option key={product.id} value={product.id}>
                          {product.description} ({product.sku})
                        </option>
                      ))}
                    </select>
                  </div>
                  <div>
                    <label className="block text-xs font-medium text-slate-500 dark:text-slate-400">Quantidade</label>
                    <input
                      type="number"
                      value={item.quantity}
                      onChange={(e) => handleItemChange(item.id, 'quantity', parseInt(e.target.value) || 0)}
                      className={`w-full p-2 border rounded-lg text-sm ${
                        theme === 'dark' ? 'bg-slate-600 border-slate-500 text-white' : 'bg-white border-slate-300 text-slate-900'
                      }`}
                      min="1"
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-xs font-medium text-slate-500 dark:text-slate-400">Preço de Custo Unitário</label>
                    <input
                      type="number"
                      step="0.01"
                      value={item.unit_cost_price}
                      onChange={(e) => handleItemChange(item.id, 'unit_cost_price', parseFloat(e.target.value) || 0)}
                      className={`w-full p-2 border rounded-lg text-sm ${
                        theme === 'dark' ? 'bg-slate-600 border-slate-500 text-white' : 'bg-white border-slate-300 text-slate-900'
                      }`}
                      required
                    />
                  </div>
                  <div className="md:col-span-3">
                    <label className="block text-xs font-medium text-slate-500 dark:text-slate-400">Custo Total do Item</label>
                    <p className={`w-full p-2 rounded-lg text-sm font-semibold ${theme === 'dark' ? 'bg-slate-600 text-white' : 'bg-slate-200 text-slate-800'}`}>
                      R$ {formatCurrencyBR(item.total_cost_price)}
                    </p>
                  </div>
                </div>
                <button
                  type="button"
                  onClick={() => handleRemoveItem(item.id)}
                  className="p-2 text-red-600 hover:bg-red-100 dark:hover:bg-red-900/20 rounded-lg transition-colors"
                >
                  <Trash2 size={20} />
                </button>
              </div>
            ))}
          </div>

          <button
            type="button"
            onClick={handleAddItem}
            className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg shadow-md hover:bg-blue-700 transition-colors mb-6"
          >
            <Plus size={18} className="mr-2" />
            Adicionar Item
          </button>

          <div className={`flex justify-between items-center p-4 rounded-lg ${theme === 'dark' ? 'bg-slate-700' : 'bg-slate-100'} mb-6`}>
            <span className="text-lg font-semibold">Custo Total da Compra:</span>
            <span className="text-2xl font-bold text-green-600">R$ {formatCurrencyBR(totalCost)}</span>
          </div>

          <div className="flex justify-end gap-4">
            <button
              type="button"
              onClick={onClose}
              className={`px-6 py-2 rounded-lg border ${
                theme === 'dark'
                  ? 'border-slate-600 text-slate-300 hover:bg-slate-700'
                  : 'border-slate-300 text-slate-700 hover:bg-slate-100'
              } transition-colors`}
            >
              Cancelar
            </button>
            <button
              type="submit"
              className="px-6 py-2 bg-green-600 text-white rounded-lg shadow-md hover:bg-green-700 transition-colors"
            >
              {editingPurchase ? 'Atualizar Compra' : 'Registrar Compra'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}